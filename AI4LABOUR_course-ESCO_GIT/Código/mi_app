from sentence_transformers import SentenceTransformer
from sentence_transformers import util
import torch
import pandas as pd

class mi_app:
    
    def __init__(self, skill):  
        self.skill=skill
        self.modelo = SentenceTransformer('sentence-transformers/all-MiniLM-L6-v2')
        self.df_esco = pd.read_csv("C:/Users/rvoca/OneDrive/Escritorio/tfg_project/AI4LABOUR_course-ESCO_GIT/data/skills_en_ESCO1.1v1.csv")
        self.escoLabels = self.df_esco["preferredLabel"].to_list()
        self.escoLabelsAlt = self.df_esco["altLabels"].to_list()

        #Diccionario que contiene la relaciÃ³n entre las etiquetas generales y las alternativas
        self.dict_Labels= {}
        self.create_dict_Labels()
        #Lista con todas las alternativas
        self.list_AltLabel=[]
        self.prepare_AltLabels()
        #Codificamos la lista alternativa
        self.embeddings = self.modelo.encode(self.escoLabels)
        self.embeddingsALT = self.modelo.encode(self.list_AltLabel)
        print("FIN INIT")
                
        
    def get_General_Label(self,skill):
        print("generalLabel")
        for clave, lista_palabras in self.dict_Labels.items():
            if skill in lista_palabras:
                return clave
        return None

        
                  
    def create_dict_Labels(self):
        print("creat_dict")
        for pos in range(0,len(self.escoLabels)):
            # print("***********************")
            # print(pos)
            # print(self.escoLabels[pos])
            # print(self.escoLabelsAlt[pos])
            if(pd.isna(self.escoLabelsAlt[pos])):
                self.dict_Labels[self.escoLabels[pos]]=None
            else:
                alternatives = self.escoLabelsAlt[pos].split("\r\n")
                #print(type(alternatives))
                #print(type(escoLabelsAlt[pos]))
                self.dict_Labels[self.escoLabels[pos]]= self.escoLabelsAlt[pos]

                 
    def prepare_AltLabels(self):
        print("prepare")
        for elem in self.df_esco["altLabels"].to_list():
            self.list_AltLabel.append(elem)
        
        

    def get_Information_Skill(self, sim):
        print("MAX1")
        res=[] 
        label = self.escoLabels[torch.argmax(sim).item()]
        uriLabel = self.df_esco["conceptUri"][torch.argmax(sim).item()]
        res.append(self.skill) 
        res.append(label)
        res.append(uriLabel)
        return res

    
        
    def get_skill_similar(self):
        print("GETSKILL")
        resultado=[]
        #Compute embedding for the skill
        embedding= self.modelo.encode(self.skill, convert_to_tensor=True)    # we encode the skill  
        sim = util.pytorch_cos_sim(embedding, self.embeddings)         # get the cosine similarity
        max_Sim = torch.max(sim).item()
        print(max_Sim)
        if(max_Sim>=0.83):
            resultado = self.get_Information_Skill(sim)
        else:
            simALT = util.pytorch_cos_sim(embedding, self.embeddings)         # get the cosine similarity
            max_Sim = torch.max(simALT).item()
            resultado = self.get_ALT_Information_Skill(simALT)
            
        print(resultado)
    
    def get_ALT_Information_Skill(self, sim):
        print("MAXALT")
        res=[] 
        label = self.list_AltLabel[torch.argmax(sim).item()]
        originalLabel = self.get_General_Label(label)
        uriLabel = self.df_esco[self.df_esco["preferredLabel"]==originalLabel]["conceptUri"]
        res.append(self.skill) 
        res.append(label)
        res.append(uriLabel)
        return res
        
    def get(self):
        print("Bucamos")
        #skill = skill_ob.get()
        res = self.get_skill_similar()
        #skill_ob.set("")
        print(res)

app = mi_app("VR")
app.get()
       