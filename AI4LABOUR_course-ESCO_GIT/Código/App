import tkinter as tk
from tkinter import *
from PIL import ImageTk, Image
from sentence_transformers import SentenceTransformer
from sentence_transformers import util
import torch
import pandas as pd
from sentence_transformers import SentenceTransformer
from sentence_transformers import util
import torch
import pandas as pd
import nltk

class mi_app: 
    signs=[".",",",";","\\n",]
    
    def __init__(self):
        self.modelo = SentenceTransformer('sentence-transformers/all-MiniLM-L6-v2')
        self.df_esco = pd.read_csv("C:/Users/rvoca/OneDrive/Escritorio/tfg_project/AI4LABOUR_course-ESCO_GIT/data/skills_en_ESCO1.1v1.csv")
        self.escoLabels = self.df_esco["preferredLabel"].to_list()
        self.escoLabelsAlt = self.df_esco["altLabels"].to_list()

        #Diccionario que contiene la relación entre las etiquetas generales y las alternativas
        self.dict_Labels= {}
        self.create_dict_Labels()
        #Lista con todas las alternativas
        self.list_AltLabel=[]
        self.prepare_AltLabels()
        #Codificamos la lista alternativa
        self.embeddings = self.modelo.encode(self.escoLabels)
        self.embeddingsALT = self.modelo.encode(self.list_AltLabel)
        print("FIN INIT")
                
        
    def get_General_Label(self,skill):
        print("generalLabel")
        for clave, lista_palabras in self.dict_Labels.items():
            if skill in lista_palabras:
                return clave
        return None
    
    def create_dict_Labels(self):
        print("creat_dict")
        for pos in range(0,len(self.escoLabels)):
            if(pd.isna(self.escoLabelsAlt[pos])):
                self.dict_Labels[self.escoLabels[pos]]=None
            else:
                alternatives = self.escoLabelsAlt[pos].split("\r\n")
                self.dict_Labels[self.escoLabels[pos]]= self.escoLabelsAlt[pos]

                 
    def prepare_AltLabels(self):
        print("prepare")
        for elem in self.df_esco["altLabels"].to_list():
            self.list_AltLabel.append(elem)
        
        

    def get_Information_Skill(self, sim, skill):
        print("MAX1")
        res=[] 
        print(sim)
        print(skill)
        print(torch.argmax(sim).item())
        label = self.escoLabels[torch.argmax(sim).item()]
        descrip = self.df_esco["description"][torch.argmax(sim).item()]
        uriLabel = self.df_esco["conceptUri"][torch.argmax(sim).item()]
        res.append(label)
        res.append(descrip)
        res.append(uriLabel)
        return res
    
    def get_ALT_Information_Skill(self, sim, skill):
        print("MAXALT")
        res=[] 
        print(sim)
        print(skill)
        print(torch.argmax(sim).item())
        label = self.list_AltLabel[torch.argmax(sim).item()]
        print(label)
        originalLabel = self.get_General_Label(label)
        descrip = self.df_esco[self.df_esco["preferredLabel"]==originalLabel]["description"].values[0]
        uriLabel = self.df_esco[self.df_esco["preferredLabel"]==originalLabel]["conceptUri"].values[0]
        res.append(originalLabel)
        res.append(descrip)
        res.append(uriLabel)
        return res
        
    def get_skill_similar(self,skill):
        print("GETSKILL")
        resultado=[]
        #Compute embedding for the skill
        embedding= self.modelo.encode(skill, convert_to_tensor=True)    # we encode the skill  
        sim = util.pytorch_cos_sim(embedding, self.embeddings)         # get the cosine similarity
        max_Sim = torch.max(sim).item()
        print("Similitud normal")
        print(max_Sim)
        if(max_Sim>=0.83):
            resultado = self.get_Information_Skill(sim,skill)
        else:
            simALT = util.pytorch_cos_sim(embedding, self.embeddingsALT)         # get the cosine similarity
            max_Sim = torch.max(simALT).item()
            print(max_Sim)
            if(max_Sim>=0.75):
                resultado = self.get_ALT_Information_Skill(simALT,skill)
        return resultado
        
    def get(self, texto):
        print("Bucamos")
        res= {}
        for elem in texto:
            for skill in elem:
                inf = self.get_skill_similar(skill)
                if(len(inf)>0):
                    res[skill]=[inf[0],inf[1],inf[2]]
                #skill_ob.set("")
        return res

       
    def split_Text(self, text):
        #Tokenizamos el texto
        texto_ok=[]
        text= text.replace("\\n","").replace(".",". ")
        tokens = nltk.sent_tokenize(text)
        print(len(tokens))
        for sentence in tokens:
            split = [word.strip() for word in sentence.split(",")]
            texto_ok.append(split)
        
        return texto_ok
    
#########################################################
    def mostrar_habilidad(self, informacion):
        print(informacion)
        skill_ventana = Text(ventana,width=90, height=15)
        print(len(informacion))
        if len(informacion) != 0:
            print("Resultado ok")
            for elem in informacion:
                skill_ventana.insert(INSERT,"SKILL\n").__sizeof__
                skill_ventana.insert(INSERT, elem+"\n")
                skill_ventana.insert(INSERT,"LABEL ESCO\n")
                skill_ventana.insert(INSERT,informacion[elem][0]+"\n")
                skill_ventana.insert(INSERT,"DESCRIPTION ESCO\n")
                skill_ventana.insert(INSERT,informacion[elem][1]+"\n")
                skill_ventana.insert(INSERT,"URL ESCO\n")
                skill_ventana.insert(INSERT,informacion[elem][2]+"\n")
                skill_ventana.place(x=25, y=280)
        else: 
            print("Resultado vacío")
            skill_ventana.insert(INSERT, "No se han encontrado habilidades similares ESCO en el texto introducido")
            skill_ventana.place(x=25, y=260)
            skill_ventana.destroy()
        
#################################################################################################################
##################### MANEJO DE INFORMACIÓN
## Creamos una instancia del objeto mi_app
app = mi_app()
    
ventana = Tk()
# Nombre de ventana
ventana.title("Similar SKILL")
# Ajustar tamaño de ventana
ventana.geometry("1000x600")
# Cambiamos color ventana
# Código de color
color_fondo = "#F5EFC3"
ventana["bg"]= color_fondo
## Variable para almacenar informacion
skill_obj = StringVar()

def find_skill():
    print("find_skill")
    if(skill_obj.get()!=None):
        print("Buscamos")
        text = app.split_Text(skill_obj.get())
        info_skill = app.get(text)
        print("Mostramos")
        app.mostrar_habilidad(info_skill)
    
    skill_obj.set("")
    
#Agregamos icono ventana
ventana.iconbitmap("C:/Users/rvoca/OneDrive/Escritorio/tfg_project/AI4LABOUR_course-ESCO_GIT/Código/Images/LogoV.ico")

#Agregamos logo
#Leemos img
image = Image.open("C:/Users/rvoca/OneDrive/Escritorio/tfg_project/AI4LABOUR_course-ESCO_GIT/Código/Images/Logo.jpg")
# Redimensionamos
rsz_image = image.resize((300,100))
img= ImageTk.PhotoImage(rsz_image)
logo = Label(image=img)
logo.image = img
logo.place(x=400,y=10)

    
# Etiqueta1
text = Label(ventana, text = "Introduce la habilidad de la que deseas obtener información ESCO: ")
text["bg"]= color_fondo
text.place(x=30, y=150)


# Entry1
entrada = Entry(ventana,textvariable=skill_obj)
entrada.place(x=33, y=180)

# Botón Aceptar
accept_button = Button(ventana, text="Buscar", command=find_skill)
accept_button.place(x=33, y=220)

#ventana.bind("<Return>",find_skill)

# Para mantener ventana abierta (siempre debe ir al final)
ventana.mainloop()
